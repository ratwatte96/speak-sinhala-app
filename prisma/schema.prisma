datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  password  String
  isVerified   Boolean  @default(false)
  verificationToken String?
  lives LivesOnUsers[]
  createdAt DateTime @default(now())
}

model Todo {
  id    Int    @id @default(autoincrement())
  description  String
  done Boolean @default(false)
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String
}

model Streak {
  id    Int    @id @default(autoincrement())
  current_streak   Int @default(0)
  last_active_date   DateTime
}

model Lives {
  id    Int    @id @default(autoincrement())
  total_lives   Int @default(5)
  users LivesOnUsers[]
  last_active_time   DateTime
}

model Quiz {
  id    Int    @id @default(autoincrement())
  quiz_name   String
  questions   QuestionsOnQuizes[]
  newLetterDatas   NewLetterDatasOnQuizes[]
  pairs PairsOnQuizes[]
  units QuizesOnUnits[]
  sinhala String?
  audio String?
  lessonContent Json?
  order Json?
}

model Unit {
  id    Int    @id @default(autoincrement())
  unit_name   String
  order Json?
  quizes QuizesOnUnits[]
}

model QuizesOnUnits {
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  quizId   Int
  unit  Unit   @relation(fields: [unitId], references: [id])
  unitId  Int 

  @@id([quizId, unitId])
}

model NewLetterData {
  id    Int    @id @default(autoincrement())
  englishWord String
  sinhala  String
  sound String
  quizes NewLetterDatasOnQuizes[]
}

model NewLetterDatasOnQuizes {
  newLetterData   NewLetterData @relation(fields: [newLetterDataId], references: [id])
  newLetterDataId Int 
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  quizId   Int

  @@id([newLetterDataId, quizId])
}

model Question {
  id    Int    @id @default(autoincrement())
  question_word   String?
  additonal_information   String?
  specific_note   String?
  quizes QuestionsOnQuizes[]
  correctAnswer   String?
  answers  AnswersOnQuestions[]
  pairs  PairsOnQuestions[]
  questionType Int
  audio String?
}

model QuestionsOnQuizes {
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int 
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  quizId   Int

  @@id([questionId, quizId])
}

model PairsOnQuizes {
  pair  Pair   @relation(fields: [pairId], references: [id])
  pairId  Int 
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  quizId   Int

  @@id([pairId, quizId])
}

model Answer {
  id    Int    @id @default(autoincrement())
  questions AnswersOnQuestions[]
  buttonLabel   String
  value   String
  sinhala  String?
  audio String?
}

model AnswersOnQuestions {
  answer     Answer     @relation(fields: [answerId], references: [id])
  answerId   Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int 

  @@id([answerId, questionId])
}

model Pair {
  id    Int    @id @default(autoincrement())
  english String?
  sinhala  String?
  sound String?
  questions PairsOnQuestions[]
  quizes PairsOnQuizes[]
}

model PairsOnQuestions {
  pair     Pair     @relation(fields: [pairId], references: [id])
  pairId   Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int 

  @@id([pairId, questionId])
}

model EventLog {
  id          Int      @id @default(autoincrement())
  eventType   String
  userId      Int?
  targetEmail String?
  message     String?
  createdAt   DateTime @default(now())
}

model LivesOnUsers {
  live     Lives     @relation(fields: [livesId], references: [id])
  livesId   Int
  user   User @relation(fields: [userId], references: [id])
  userId Int 

  @@id([livesId, userId])
}